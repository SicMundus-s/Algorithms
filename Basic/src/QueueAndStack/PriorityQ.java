package QueueAndStack;


/**
 * Приоритетная очередь реализуемая на базе массива, данная структура данных достаёт самый приоритетные элементы массива.
 * Для этого при вставлении нового элемента происходит проверка, если элемент новый больше, то сравнимый элемент массива сдвигается "наверх"
 * это происходит до тех пор, пока новый элемент не станет меньше сравнимого. Таким образом мы можем быстро получить
 * самый приоритетные элементы массива, т.к они всегда находятся "наверху" массива.
 */
public class PriorityQ {
    // Элементы массива сортируются по значению ключа,
    // от максимумa (0) до минимума (maxSize-1)
    private int maxSize;
    private long[] queArray;
    private int nItems;
    //-------------------------------------------------------------
    public PriorityQ(int s) // Конструктор
    {
        maxSize = s;
        queArray = new long[maxSize];
        nItems = 0;
    }
    //-------------------------------------------------------------
    public void insert(long item) // Вставка элемента
    {
        int j;
        if(nItems==0) // Если очередь пуста,
            queArray[nItems++] = item; // вставляем в ячейку 0
        else // Если очередь содержит элементы
        {
            for(j=nItems-1; j>=0; j--) // Перебор в обратном направлении
            {
                if( item > queArray[j] ) // Если новый элемент больше,
                    queArray[j+1] = queArray[j]; // сдвинуть вверх
                else // Если меньше,
                    break; // сдвиг прекращается
            }
            queArray[j+1] = item; // Вставка элемента
            nItems++;
        }
    } //
    //-------------------------------------------------------------
    public long remove() // Извлечение минимального элемента
    { return queArray[--nItems]; }
    //-------------------------------------------------------------
    public long peekMin() // Чтение минимального элемента
    { return queArray[nItems-1]; }
    //-------------------------------------------------------------
    public boolean isEmpty() // true, если очередь пуста
    { return (nItems==0); }
    //-------------------------------------------------------------
    public boolean isFull() // true, если очередь заполнена
    { return (nItems == maxSize); }
//-------------------------------------
}
